nil (do (set! *warn-on-reflection* nil) (do nil (try (clojure.core/require (quote clojure.tools.nrepl.server)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote clojure.tools.nrepl.server) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote complete.core)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote complete.core) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.apropos)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.apropos) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.classpath)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.classpath) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.complete)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.complete) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.info)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.info) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.inspect)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.inspect) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.macroexpand)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.macroexpand) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.ns)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.ns) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.resource)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.resource) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.stacktrace)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.stacktrace) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.test)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.test) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.trace)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.trace) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) (try (clojure.core/require (quote cider.nrepl.middleware.undef)) (catch java.lang.Throwable t__10656__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote cider.nrepl.middleware.undef) ":") (clojure.core/or (.getMessage t__10656__auto__) (clojure.core/type t__10656__auto__))))) nil) (do (clojure.core/when (try (java.lang.Class/forName "sun.misc.Signal") (catch java.lang.ClassNotFoundException e__10648__auto__)) (try (sun.misc.Signal/handle (sun.misc.Signal. "INT") (clojure.core/proxy [sun.misc.SignalHandler] [] (leiningen.repl/handle [signal__10649__auto__]))) (catch java.lang.Throwable e__10648__auto__))) (clojure.core/let [server__10651__auto__ (clojure.tools.nrepl.server/start-server :bind "127.0.0.1" :port 0 :ack-port 54435 :handler (clojure.tools.nrepl.server/default-handler (var cider.nrepl.middleware.apropos/wrap-apropos) (var cider.nrepl.middleware.classpath/wrap-classpath) (var cider.nrepl.middleware.complete/wrap-complete) (var cider.nrepl.middleware.info/wrap-info) (var cider.nrepl.middleware.inspect/wrap-inspect) (var cider.nrepl.middleware.macroexpand/wrap-macroexpand) (var cider.nrepl.middleware.ns/wrap-ns) (var cider.nrepl.middleware.resource/wrap-resource) (var cider.nrepl.middleware.stacktrace/wrap-stacktrace) (var cider.nrepl.middleware.test/wrap-test) (var cider.nrepl.middleware.trace/wrap-trace) (var cider.nrepl.middleware.undef/wrap-undef))) port__10652__auto__ (:port server__10651__auto__) repl-port-file__10653__auto__ (clojure.core/apply clojure.java.io/file ["/home/severin/go/src/github.com/mswift42/reacdays/webapp" ".nrepl-port"]) legacy-repl-port__10654__auto__ (if (.exists (clojure.java.io/file "/home/severin/go/src/github.com/mswift42/reacdays/webapp/target")) (clojure.java.io/file "/home/severin/go/src/github.com/mswift42/reacdays/webapp/target" "repl-port"))] (clojure.core/when false (clojure.core/println "nREPL server started on port" port__10652__auto__ "on host" "127.0.0.1" (clojure.core/str "- nrepl://" "127.0.0.1" ":" port__10652__auto__))) (clojure.core/spit (clojure.core/doto repl-port-file__10653__auto__ .deleteOnExit) port__10652__auto__) (clojure.core/when legacy-repl-port__10654__auto__ (clojure.core/spit (clojure.core/doto legacy-repl-port__10654__auto__ .deleteOnExit) port__10652__auto__)) (clojure.core/deref (clojure.core/promise)))))